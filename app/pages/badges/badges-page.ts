import * as Dialog from "tns-core-modules/ui/dialogs";
import {topmost} from "tns-core-modules/ui/frame";
import {NavigatedData, Page} from "ui/page";
import {BadgesViewModel} from "./badges-view-model";

import {Log} from "~/lib/Log";
import * as Badge from "~/lib/pop/Badge";
import {gData} from "~/app";

let page: Page;
const pageObject = undefined;

export function onNavigatingTo(args: NavigatedData) {
    page = <Page>args.object;
    page.bindingContext = BadgesViewModel;

    showBadges(Promise.resolve(gData.badges));

    setTimeout(() => {
        showBadges(gData.updateAllBadges());
    }, 100);
}

function showBadges(badges: Promise<Array<Badge.Badge>>) {
    Log.lvl1("Loading parties");

    badges.then(badges => {
        page.bindingContext.items.splice(0);
        page.bindingContext.isEmpty = true;
        badges.forEach((badge: any, index: number) => {
            if (badge.state() === Badge.STATE_TOKEN) {
                page.bindingContext.items.push({
                    party: badge,
                    name: badge.config.name,
                    datetime: badge.config.datetime,
                    location: badge.config.location,
                    index: index + 1
                });
                page.bindingContext.isEmpty = false;
            }
        });
    });
}

export function partyTapped(args) {
    const index = args.index;
    const party = page.bindingContext.items.getItem(index).party;

    const WALLET_DELETE = "Delete";
    const WALLET_SHOW = "Show";

    const actions = [WALLET_SHOW, WALLET_DELETE];

    return Dialog.action({
        message: "Choose an Action",
        cancelButtonText: "Cancel",
        actions
    }).then((result) => {
        switch (result) {
            case WALLET_DELETE:
                return Dialog.confirm({
                    title: "Deleting party-token",
                    message: "You're about to delete the party-token - \n" +
                        "are you sure?",
                    okButtonText: "Yes, delete",
                    cancelButtonText: "No, keep"
                })
                    .then((del) => {
                        if (del) {
                            return gData.removeBadge(party)
                                .then(() => {
                                    page.bindingContext.items.splice(index, 1);

                                    return pageObject.getViewById("listView").refresh();
                                });
                        }
                    })
                    .catch((err) => {
                        console.log("error while deleting:", err);
                    });
            case WALLET_SHOW:
                return topmost().navigate({
                    moduleName: "pages/admin/parties/config/config-page",
                    context: {
                        wallet: party,
                        readOnly: true
                    }
                });
        }
    });
}
exports.partyTapped = partyTapped;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2VzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWRnZXMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUFzRDtBQUN0RCxxREFBa0Q7QUFFbEQsMkRBQW9EO0FBRXBELG1DQUE4QjtBQUM5Qix5Q0FBeUM7QUFDekMsK0JBQTRCO0FBRTVCLElBQUksSUFBVSxDQUFDO0FBQ2YsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBRTdCLHdCQUErQixJQUFtQjtJQUM5QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLG1DQUFlLENBQUM7SUFFdEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLFVBQVUsQ0FBQyxXQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixDQUFDO0FBVEQsd0NBU0M7QUFFRCxvQkFBb0IsTUFBbUM7SUFDbkQsU0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO29CQUMzQixLQUFLLEVBQUUsS0FBSztvQkFDWixJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJO29CQUN2QixRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRO29CQUMvQixRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRO29CQUMvQixLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUM7aUJBQ25CLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDeEMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQscUJBQTRCLElBQUk7SUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRTdELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7SUFFM0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixnQkFBZ0IsRUFBRSxRQUFRO1FBQzFCLE9BQU87S0FDVixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDZixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsS0FBSyxhQUFhO2dCQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO29CQUNsQixLQUFLLEVBQUUsc0JBQXNCO29CQUM3QixPQUFPLEVBQUUsNkNBQTZDO3dCQUNsRCxlQUFlO29CQUNuQixZQUFZLEVBQUUsYUFBYTtvQkFDM0IsZ0JBQWdCLEVBQUUsVUFBVTtpQkFDL0IsQ0FBQztxQkFDRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDVixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNOLE1BQU0sQ0FBQyxXQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQzs2QkFDMUIsSUFBSSxDQUFDLEdBQUcsRUFBRTs0QkFDUCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOzRCQUUzQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzt3QkFDeEQsQ0FBQyxDQUFDLENBQUM7b0JBQ1gsQ0FBQztnQkFDTCxDQUFDLENBQUM7cUJBQ0QsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDOUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxLQUFLLFdBQVc7Z0JBQ1osTUFBTSxDQUFDLGVBQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztvQkFDdEIsVUFBVSxFQUFFLHdDQUF3QztvQkFDcEQsT0FBTyxFQUFFO3dCQUNMLE1BQU0sRUFBRSxLQUFLO3dCQUNiLFFBQVEsRUFBRSxJQUFJO3FCQUNqQjtpQkFDSixDQUFDLENBQUM7UUFDWCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBOUNELGtDQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERpYWxvZyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5pbXBvcnQge3RvcG1vc3R9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XG5pbXBvcnQge05hdmlnYXRlZERhdGEsIFBhZ2V9IGZyb20gXCJ1aS9wYWdlXCI7XG5pbXBvcnQge0JhZGdlc1ZpZXdNb2RlbH0gZnJvbSBcIi4vYmFkZ2VzLXZpZXctbW9kZWxcIjtcblxuaW1wb3J0IHtMb2d9IGZyb20gXCJ+L2xpYi9Mb2dcIjtcbmltcG9ydCAqIGFzIEJhZGdlIGZyb20gXCJ+L2xpYi9wb3AvQmFkZ2VcIjtcbmltcG9ydCB7Z0RhdGF9IGZyb20gXCJ+L2FwcFwiO1xuXG5sZXQgcGFnZTogUGFnZTtcbmNvbnN0IHBhZ2VPYmplY3QgPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzOiBOYXZpZ2F0ZWREYXRhKSB7XG4gICAgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBCYWRnZXNWaWV3TW9kZWw7XG5cbiAgICBzaG93QmFkZ2VzKFByb21pc2UucmVzb2x2ZShnRGF0YS5iYWRnZXMpKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzaG93QmFkZ2VzKGdEYXRhLnVwZGF0ZUFsbEJhZGdlcygpKTtcbiAgICB9LCAxMDApO1xufVxuXG5mdW5jdGlvbiBzaG93QmFkZ2VzKGJhZGdlczogUHJvbWlzZTxBcnJheTxCYWRnZS5CYWRnZT4+KSB7XG4gICAgTG9nLmx2bDEoXCJMb2FkaW5nIHBhcnRpZXNcIik7XG5cbiAgICBiYWRnZXMudGhlbihiYWRnZXMgPT4ge1xuICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZSgwKTtcbiAgICAgICAgcGFnZS5iaW5kaW5nQ29udGV4dC5pc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgYmFkZ2VzLmZvckVhY2goKGJhZGdlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChiYWRnZS5zdGF0ZSgpID09PSBCYWRnZS5TVEFURV9UT0tFTikge1xuICAgICAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBhcnR5OiBiYWRnZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYmFkZ2UuY29uZmlnLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lOiBiYWRnZS5jb25maWcuZGF0ZXRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBiYWRnZS5jb25maWcubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCArIDFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0LmlzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0eVRhcHBlZChhcmdzKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcmdzLmluZGV4O1xuICAgIGNvbnN0IHBhcnR5ID0gcGFnZS5iaW5kaW5nQ29udGV4dC5pdGVtcy5nZXRJdGVtKGluZGV4KS5wYXJ0eTtcblxuICAgIGNvbnN0IFdBTExFVF9ERUxFVEUgPSBcIkRlbGV0ZVwiO1xuICAgIGNvbnN0IFdBTExFVF9TSE9XID0gXCJTaG93XCI7XG5cbiAgICBjb25zdCBhY3Rpb25zID0gW1dBTExFVF9TSE9XLCBXQUxMRVRfREVMRVRFXTtcblxuICAgIHJldHVybiBEaWFsb2cuYWN0aW9uKHtcbiAgICAgICAgbWVzc2FnZTogXCJDaG9vc2UgYW4gQWN0aW9uXCIsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiQ2FuY2VsXCIsXG4gICAgICAgIGFjdGlvbnNcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgc3dpdGNoIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNhc2UgV0FMTEVUX0RFTEVURTpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJEZWxldGluZyBwYXJ0eS10b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIllvdSdyZSBhYm91dCB0byBkZWxldGUgdGhlIHBhcnR5LXRva2VuIC0gXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmUgeW91IHN1cmU/XCIsXG4gICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBrZWVwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdEYXRhLnJlbW92ZUJhZGdlKHBhcnR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlT2JqZWN0LmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIikucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3Igd2hpbGUgZGVsZXRpbmc6XCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBXQUxMRVRfU0hPVzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9wbW9zdCgpLm5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJwYWdlcy9hZG1pbi9wYXJ0aWVzL2NvbmZpZy9jb25maWctcGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsZXQ6IHBhcnR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=
