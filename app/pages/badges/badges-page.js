"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const badges_view_model_1 = require("./badges-view-model");
const Dialog = require("tns-core-modules/ui/dialogs");
const frame_1 = require("tns-core-modules/ui/frame");
let lib = require("~/lib");
let Badge = lib.pop.Badge;
let Log = lib.Log.default;
let page = undefined;
let pageObject = undefined;
function onNavigatingTo(args) {
    page = args.object;
    page.bindingContext = badges_view_model_1.BadgesViewModel;
    return loadParties();
}
exports.onNavigatingTo = onNavigatingTo;
function loadParties() {
    Log.lvl1("Loading parties");
    page.bindingContext.items.splice(0);
    return Badge.Badge.loadAll()
        .then(badges => {
        return Badge.Badge.updateAll();
    })
        .then(badges => {
        page.bindingContext.isEmpty = true;
        Object.values(badges).forEach((badge, index) => {
            if (badge.state() == Badge.STATE_TOKEN) {
                page.bindingContext.items.push({
                    party: badge,
                    name: badge.config.name,
                    datetime: badge.config.datetime,
                    location: badge.config.location,
                    index: index + 1
                });
                page.bindingContext.isEmpty = false;
            }
        });
    })
        .catch(err => {
        Log.catch(err);
    });
}
function partyTapped(args) {
    const index = args.index;
    const party = page.bindingContext.items.getItem(index).party;
    const WALLET_DELETE = "Delete";
    const WALLET_SHOW = "Show";
    let actions = [WALLET_SHOW, WALLET_DELETE];
    return Dialog.action({
        message: "Choose an Action",
        cancelButtonText: "Cancel",
        actions: actions
    }).then(result => {
        switch (result) {
            case WALLET_DELETE:
                Dialog.confirm({
                    title: "Deleting party-token",
                    message: "You're about to delete the party-token - \n" +
                        "are you sure?",
                    okButtonText: "Yes, delete",
                    cancelButtonText: "No, keep"
                })
                    .then(del => {
                    if (del) {
                        return party.remove()
                            .then(() => {
                            page.bindingContext.items.splice(index, 1);
                            return pageObject.getViewById("listView").refresh();
                        });
                    }
                })
                    .catch(err => {
                    console.log("error while deleting:", err);
                });
            case WALLET_SHOW:
                return frame_1.topmost().navigate({
                    moduleName: "pages/admin/parties/config/config-page",
                    context: {
                        wallet: party,
                        readOnly: true
                    }
                });
        }
    });
}
exports.partyTapped = partyTapped;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2VzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWRnZXMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJEQUFvRDtBQUNwRCxzREFBc0Q7QUFDdEQscURBQWtEO0FBRWxELElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUMxQixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUUxQixJQUFJLElBQUksR0FBUyxTQUFTLENBQUM7QUFDM0IsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBRTNCLHdCQUErQixJQUFtQjtJQUM5QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLG1DQUFlLENBQUM7SUFDdEMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFKRCx3Q0FJQztBQUVEO0lBQ0ksR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7U0FDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQSxFQUFFO1FBQ1YsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ1gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBUyxFQUFFLEtBQVksRUFB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dGEsIFBhZ2V9IGZyb20gXCJ1aS9wYWdlXCI7XG5pbXBvcnQge0JhZGdlc1ZpZXdNb2RlbH0gZnJvbSBcIi4vYmFkZ2VzLXZpZXctbW9kZWxcIjtcbmltcG9ydCAqIGFzIERpYWxvZyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5pbXBvcnQge3RvcG1vc3R9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XG5cbmxldCBsaWIgPSByZXF1aXJlKFwifi9saWJcIik7XG5sZXQgQmFkZ2UgPSBsaWIucG9wLkJhZGdlO1xubGV0IExvZyA9IGxpYi5Mb2cuZGVmYXVsdDtcblxubGV0IHBhZ2U6IFBhZ2UgPSB1bmRlZmluZWQ7XG5sZXQgcGFnZU9iamVjdCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IEJhZGdlc1ZpZXdNb2RlbDtcbiAgICByZXR1cm4gbG9hZFBhcnRpZXMoKTtcbn1cblxuZnVuY3Rpb24gbG9hZFBhcnRpZXMoKSB7XG4gICAgTG9nLmx2bDEoXCJMb2FkaW5nIHBhcnRpZXNcIik7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dC5pdGVtcy5zcGxpY2UoMCk7XG4gICAgcmV0dXJuIEJhZGdlLkJhZGdlLmxvYWRBbGwoKVxuICAgICAgICAudGhlbihiYWRnZXM9PntcbiAgICAgICAgICAgIHJldHVybiBCYWRnZS5CYWRnZS51cGRhdGVBbGwoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oYmFkZ2VzID0+IHtcbiAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKGJhZGdlcykuZm9yRWFjaCgoYmFkZ2U6YW55LCBpbmRleDpudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYmFkZ2Uuc3RhdGUoKSA9PSBCYWRnZS5TVEFURV9UT0tFTikge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHk6IGJhZGdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYmFkZ2UuY29uZmlnLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZTogYmFkZ2UuY29uZmlnLmRhdGV0aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGJhZGdlLmNvbmZpZy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCArIDFcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5iaW5kaW5nQ29udGV4dC5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgTG9nLmNhdGNoKGVycik7XG4gICAgICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydHlUYXBwZWQoYXJncykge1xuICAgIGNvbnN0IGluZGV4ID0gYXJncy5pbmRleDtcbiAgICBjb25zdCBwYXJ0eSA9IHBhZ2UuYmluZGluZ0NvbnRleHQuaXRlbXMuZ2V0SXRlbShpbmRleCkucGFydHk7XG5cbiAgICBjb25zdCBXQUxMRVRfREVMRVRFID0gXCJEZWxldGVcIjtcbiAgICBjb25zdCBXQUxMRVRfU0hPVyA9IFwiU2hvd1wiO1xuXG4gICAgbGV0IGFjdGlvbnMgPSBbV0FMTEVUX1NIT1csIFdBTExFVF9ERUxFVEVdO1xuICAgIHJldHVybiBEaWFsb2cuYWN0aW9uKHtcbiAgICAgICAgbWVzc2FnZTogXCJDaG9vc2UgYW4gQWN0aW9uXCIsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiQ2FuY2VsXCIsXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHN3aXRjaCAocmVzdWx0KSB7XG4gICAgICAgICAgICBjYXNlIFdBTExFVF9ERUxFVEU6XG4gICAgICAgICAgICAgICAgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJEZWxldGluZyBwYXJ0eS10b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIllvdSdyZSBhYm91dCB0byBkZWxldGUgdGhlIHBhcnR5LXRva2VuIC0gXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmUgeW91IHN1cmU/XCIsXG4gICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBrZWVwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihkZWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0eS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZU9iamVjdC5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIHdoaWxlIGRlbGV0aW5nOlwiLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgY2FzZSBXQUxMRVRfU0hPVzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9wbW9zdCgpLm5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJwYWdlcy9hZG1pbi9wYXJ0aWVzL2NvbmZpZy9jb25maWctcGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsZXQ6IHBhcnR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=