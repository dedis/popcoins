"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dialog = require("tns-core-modules/ui/dialogs");
const frame_1 = require("tns-core-modules/ui/frame");
const badges_view_model_1 = require("./badges-view-model");
const Log_1 = require("~/lib/Log");
const Badge = require("~/lib/pop/Badge");
const app_1 = require("~/app");
let page;
const pageObject = undefined;
function onNavigatingTo(args) {
    page = args.object;
    page.bindingContext = badges_view_model_1.BadgesViewModel;
    return showBadges(Badge.Badge.loadAll())
        .then(() => {
        setTimeout(() => {
            showBadges(app_1.gData.updateAllBadges())
                .catch(err => {
                Log_1.Log.catch(err);
            });
        }, 100);
    });
}
exports.onNavigatingTo = onNavigatingTo;
function showBadges(badges) {
    Log_1.Log.lvl1("Loading parties");
    return Badge.Badge.loadAll()
        .then((badges) => {
        page.bindingContext.items.splice(0);
        page.bindingContext.isEmpty = true;
        badges.forEach((badge, index) => {
            if (badge.state() === Badge.STATE_TOKEN) {
                page.bindingContext.items.push({
                    party: badge,
                    name: badge.config.name,
                    datetime: badge.config.datetime,
                    location: badge.config.location,
                    index: index + 1
                });
                page.bindingContext.isEmpty = false;
            }
        });
    })
        .catch((err) => {
        Log_1.Log.catch(err);
    });
}
function partyTapped(args) {
    const index = args.index;
    const party = page.bindingContext.items.getItem(index).party;
    const WALLET_DELETE = "Delete";
    const WALLET_SHOW = "Show";
    const actions = [WALLET_SHOW, WALLET_DELETE];
    return Dialog.action({
        message: "Choose an Action",
        cancelButtonText: "Cancel",
        actions
    }).then((result) => {
        switch (result) {
            case WALLET_DELETE:
                return Dialog.confirm({
                    title: "Deleting party-token",
                    message: "You're about to delete the party-token - \n" +
                        "are you sure?",
                    okButtonText: "Yes, delete",
                    cancelButtonText: "No, keep"
                })
                    .then((del) => {
                    if (del) {
                        return app_1.gData.removeBadge(party)
                            .then(() => {
                            page.bindingContext.items.splice(index, 1);
                            return pageObject.getViewById("listView").refresh();
                        });
                    }
                })
                    .catch((err) => {
                    console.log("error while deleting:", err);
                });
            case WALLET_SHOW:
                return frame_1.topmost().navigate({
                    moduleName: "pages/admin/parties/config/config-page",
                    context: {
                        wallet: party,
                        readOnly: true
                    }
                });
        }
    });
}
exports.partyTapped = partyTapped;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2VzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWRnZXMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUFzRDtBQUN0RCxxREFBb0Q7QUFFcEQsMkRBQXNEO0FBRXRELG1DQUFnQztBQUNoQyx5Q0FBeUM7QUFDekMsK0JBQThCO0FBRTlCLElBQUksSUFBVSxDQUFDO0FBQ2YsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBRTdCLHdCQUErQixJQUFtQjtJQUM5QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLG1DQUFlLENBQUM7SUFFdEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ25DLElBQUksQ0FBQyxHQUFFLEVBQUU7UUFDTixVQUFVLENBQUMsR0FBRSxFQUFFO1lBQ1gsVUFBVSxDQUFDLFdBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFDOUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNULFNBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFiRCx3Q0FhQztBQUVELG9CQUFvQixNQUFtQztJQUNuRCxTQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFNUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1NBQ3ZCLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNuQyxN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Q0FBQyxDQUFDO0FBQ1AsQ0FBQztBQTlDRCxrQ0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBEaWFsb2cgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9nc1wiO1xuaW1wb3J0IHsgdG9wbW9zdCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XG5pbXBvcnQgeyBOYXZpZ2F0ZWREYXRhLCBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcbmltcG9ydCB7IEJhZGdlc1ZpZXdNb2RlbCB9IGZyb20gXCIuL2JhZGdlcy12aWV3LW1vZGVsXCI7XG5cbmltcG9ydCB7IExvZyB9IGZyb20gXCJ+L2xpYi9Mb2dcIjtcbmltcG9ydCAqIGFzIEJhZGdlIGZyb20gXCJ+L2xpYi9wb3AvQmFkZ2VcIjtcbmltcG9ydCB7IGdEYXRhIH0gZnJvbSBcIn4vYXBwXCI7XG5cbmxldCBwYWdlOiBQYWdlO1xuY29uc3QgcGFnZU9iamVjdCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IEJhZGdlc1ZpZXdNb2RlbDtcblxuICAgIHJldHVybiBzaG93QmFkZ2VzKEJhZGdlLkJhZGdlLmxvYWRBbGwoKSlcbiAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBzaG93QmFkZ2VzKGdEYXRhLnVwZGF0ZUFsbEJhZGdlcygpKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmNhdGNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd0JhZGdlcyhiYWRnZXM6IFByb21pc2U8QXJyYXk8QmFkZ2UuQmFkZ2U+Pik6IFByb21pc2U8YW55PiB7XG4gICAgTG9nLmx2bDEoXCJMb2FkaW5nIHBhcnRpZXNcIik7XG5cbiAgICByZXR1cm4gQmFkZ2UuQmFkZ2UubG9hZEFsbCgpXG4gICAgICAgIC50aGVuKChiYWRnZXMpID0+IHtcbiAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXRlbXMuc3BsaWNlKDApO1xuICAgICAgICAgICAgcGFnZS5iaW5kaW5nQ29udGV4dC5pc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJhZGdlcy5mb3JFYWNoKChiYWRnZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJhZGdlLnN0YXRlKCkgPT09IEJhZGdlLlNUQVRFX1RPS0VOKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eTogYmFkZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBiYWRnZS5jb25maWcubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lOiBiYWRnZS5jb25maWcuZGF0ZXRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogYmFkZ2UuY29uZmlnLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4ICsgMVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5iaW5kaW5nQ29udGV4dC5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBMb2cuY2F0Y2goZXJyKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0eVRhcHBlZChhcmdzKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcmdzLmluZGV4O1xuICAgIGNvbnN0IHBhcnR5ID0gcGFnZS5iaW5kaW5nQ29udGV4dC5pdGVtcy5nZXRJdGVtKGluZGV4KS5wYXJ0eTtcblxuICAgIGNvbnN0IFdBTExFVF9ERUxFVEUgPSBcIkRlbGV0ZVwiO1xuICAgIGNvbnN0IFdBTExFVF9TSE9XID0gXCJTaG93XCI7XG5cbiAgICBjb25zdCBhY3Rpb25zID0gW1dBTExFVF9TSE9XLCBXQUxMRVRfREVMRVRFXTtcblxuICAgIHJldHVybiBEaWFsb2cuYWN0aW9uKHtcbiAgICAgICAgbWVzc2FnZTogXCJDaG9vc2UgYW4gQWN0aW9uXCIsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiQ2FuY2VsXCIsXG4gICAgICAgIGFjdGlvbnNcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgc3dpdGNoIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNhc2UgV0FMTEVUX0RFTEVURTpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJEZWxldGluZyBwYXJ0eS10b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIllvdSdyZSBhYm91dCB0byBkZWxldGUgdGhlIHBhcnR5LXRva2VuIC0gXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmUgeW91IHN1cmU/XCIsXG4gICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBrZWVwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdEYXRhLnJlbW92ZUJhZGdlKHBhcnR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlT2JqZWN0LmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIikucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3Igd2hpbGUgZGVsZXRpbmc6XCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBXQUxMRVRfU0hPVzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9wbW9zdCgpLm5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJwYWdlcy9hZG1pbi9wYXJ0aWVzL2NvbmZpZy9jb25maWctcGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsZXQ6IHBhcnR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=