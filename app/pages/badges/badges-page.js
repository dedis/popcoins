"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const badges_view_model_1 = require("./badges-view-model");
const Dialog = require("tns-core-modules/ui/dialogs");
const frame_1 = require("tns-core-modules/ui/frame");
let lib = require("~/lib");
let Badge = lib.pop.Badge;
let Log = lib.Log.default;
let page = undefined;
let pageObject = undefined;
function onNavigatingTo(args) {
    Log.print("getting to badges");
    page = args.object;
    page.bindingContext = badges_view_model_1.BadgesViewModel;
    Log.print("isempty:", page.bindingContext.isEmpty);
    return loadParties();
}
exports.onNavigatingTo = onNavigatingTo;
function loadParties() {
    Log.lvl1("Loading parties");
    page.bindingContext.items.splice(0);
    return Badge.Badge.loadAll()
        .then(badges => {
        return Badge.Badge.updateAll();
    })
        .then(badges => {
        page.bindingContext.isEmpty = true;
        Object.values(badges).forEach((badge, index) => {
            Log.print("Found badge with state:", badge.state());
            if (badge.state() == Badge.STATE_TOKEN) {
                page.bindingContext.items.push({
                    party: badge,
                    name: badge.config.name,
                    datetime: badge.config.datetime,
                    location: badge.config.location,
                    index: index + 1
                });
                Log.print("setting isEmpty to false");
                page.bindingContext.isEmpty = false;
            }
        });
        Log.print("isempty:", page.bindingContext.isEmpty);
    })
        .catch(err => {
        Log.catch(err);
    });
}
function partyTapped(args) {
    const index = args.index;
    const party = page.bindingContext.items.getItem(index).party;
    const WALLET_DELETE = "Delete";
    const WALLET_SHOW = "Show";
    let actions = [WALLET_SHOW, WALLET_DELETE];
    return Dialog.action({
        message: "Choose an Action",
        cancelButtonText: "Cancel",
        actions: actions
    }).then(result => {
        switch (result) {
            case WALLET_DELETE:
                Dialog.confirm({
                    title: "Deleting party-token",
                    message: "You're about to delete the party-token - \n" +
                        "are you sure?",
                    okButtonText: "Yes, delete",
                    cancelButtonText: "No, keep"
                })
                    .then(del => {
                    if (del) {
                        return party.remove()
                            .then(() => {
                            page.bindingContext.items.splice(index, 1);
                            return pageObject.getViewById("listView").refresh();
                        });
                    }
                })
                    .catch(err => {
                    console.log("error while deleting:", err);
                });
            case WALLET_SHOW:
                return frame_1.topmost().navigate({
                    moduleName: "pages/admin/parties/config/config-page",
                    context: {
                        wallet: party,
                        readOnly: true
                    }
                });
        }
    });
}
exports.partyTapped = partyTapped;
//# sourceMappingURL=data:application/json;base64,