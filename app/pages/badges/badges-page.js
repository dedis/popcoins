"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dialog = require("tns-core-modules/ui/dialogs");
const frame_1 = require("tns-core-modules/ui/frame");
const badges_view_model_1 = require("./badges-view-model");
const Log_1 = require("~/lib/Log");
const Badge = require("~/lib/pop/Badge");
let page;
const pageObject = undefined;
function onNavigatingTo(args) {
    page = args.object;
    page.bindingContext = badges_view_model_1.BadgesViewModel;
    return loadParties();
}
exports.onNavigatingTo = onNavigatingTo;
function loadParties() {
    Log_1.Log.lvl1("Loading parties");
    page.bindingContext.items.splice(0);
    return Badge.Badge.loadAll()
        .then(() => {
        return Badge.Badge.updateAll();
    })
        .then((badges) => {
        page.bindingContext.isEmpty = true;
        Object.values(badges).forEach((badge, index) => {
            if (badge.state() === Badge.STATE_TOKEN) {
                page.bindingContext.items.push({
                    party: badge,
                    name: badge.config.name,
                    datetime: badge.config.datetime,
                    location: badge.config.location,
                    index: index + 1
                });
                page.bindingContext.isEmpty = false;
            }
        });
    })
        .catch((err) => {
        Log_1.Log.catch(err);
    });
}
function partyTapped(args) {
    const index = args.index;
    const party = page.bindingContext.items.getItem(index).party;
    const WALLET_DELETE = "Delete";
    const WALLET_SHOW = "Show";
    const actions = [WALLET_SHOW, WALLET_DELETE];
    return Dialog.action({
        message: "Choose an Action",
        cancelButtonText: "Cancel",
        actions
    }).then((result) => {
        switch (result) {
            case WALLET_DELETE:
                return Dialog.confirm({
                    title: "Deleting party-token",
                    message: "You're about to delete the party-token - \n" +
                        "are you sure?",
                    okButtonText: "Yes, delete",
                    cancelButtonText: "No, keep"
                })
                    .then((del) => {
                    if (del) {
                        return party.remove()
                            .then(() => {
                            page.bindingContext.items.splice(index, 1);
                            return pageObject.getViewById("listView").refresh();
                        });
                    }
                })
                    .catch((err) => {
                    console.log("error while deleting:", err);
                });
            case WALLET_SHOW:
                return frame_1.topmost().navigate({
                    moduleName: "pages/admin/parties/config/config-page",
                    context: {
                        wallet: party,
                        readOnly: true
                    }
                });
        }
    });
}
exports.partyTapped = partyTapped;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2VzLXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWRnZXMtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUFzRDtBQUN0RCxxREFBb0Q7QUFFcEQsMkRBQXNEO0FBRXRELG1DQUFnQztBQUNoQyx5Q0FBeUM7QUFFekMsSUFBSSxJQUFVLENBQUM7QUFDZixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFFN0Isd0JBQStCLElBQW1CO0lBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUNBQWUsQ0FBQztJQUV0QyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDekIsQ0FBQztBQUxELHdDQUtDO0FBRUQ7SUFDSSxTQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtTQUN2QixJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDYixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDeEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7b0JBQzNCLEtBQUssRUFBRSxLQUFLO29CQUNaLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUk7b0JBQ3ZCLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVE7b0JBQy9CLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVE7b0JBQy9CLEtBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQztpQkFDbkIsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN4QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNYLFNBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQscUJBQTRCLElBQUk7SUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRTdELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7SUFFM0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLGtCQUFrQjtRQUMzQixnQkFBZ0IsRUFBRSxRQUFRO1FBQzFCLE9BQU87S0FDVixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDZixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsS0FBSyxhQUFhO2dCQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO29CQUNsQixLQUFLLEVBQUUsc0JBQXNCO29CQUM3QixPQUFPLEVBQUUsNkNBQTZDO3dCQUNsRCxlQUFlO29CQUNuQixZQUFZLEVBQUUsYUFBYTtvQkFDM0IsZ0JBQWdCLEVBQUUsVUFBVTtpQkFDL0IsQ0FBQztxQkFDRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDVixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFOzZCQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFOzRCQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7NEJBRTNDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUN4RCxDQUFDLENBQUMsQ0FBQztvQkFDWCxDQUFDO2dCQUNMLENBQUMsQ0FBQztxQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QyxDQUFDLENBQUMsQ0FBQztZQUNYLEtBQUssV0FBVztnQkFDWixNQUFNLENBQUMsZUFBTyxFQUFFLENBQUMsUUFBUSxDQUFDO29CQUN0QixVQUFVLEVBQUUsd0NBQXdDO29CQUNwRCxPQUFPLEVBQUU7d0JBQ0wsTUFBTSxFQUFFLEtBQUs7d0JBQ2IsUUFBUSxFQUFFLElBQUk7cUJBQ2pCO2lCQUNKLENBQUMsQ0FBQztRQUNYLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUE5Q0Qsa0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRGlhbG9nIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2RpYWxvZ3NcIjtcbmltcG9ydCB7IHRvcG1vc3QgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZVwiO1xuaW1wb3J0IHsgTmF2aWdhdGVkRGF0YSwgUGFnZSB9IGZyb20gXCJ1aS9wYWdlXCI7XG5pbXBvcnQgeyBCYWRnZXNWaWV3TW9kZWwgfSBmcm9tIFwiLi9iYWRnZXMtdmlldy1tb2RlbFwiO1xuXG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwifi9saWIvTG9nXCI7XG5pbXBvcnQgKiBhcyBCYWRnZSBmcm9tIFwifi9saWIvcG9wL0JhZGdlXCI7XG5cbmxldCBwYWdlOiBQYWdlO1xuY29uc3QgcGFnZU9iamVjdCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IEJhZGdlc1ZpZXdNb2RlbDtcblxuICAgIHJldHVybiBsb2FkUGFydGllcygpO1xufVxuXG5mdW5jdGlvbiBsb2FkUGFydGllcygpIHtcbiAgICBMb2cubHZsMShcIkxvYWRpbmcgcGFydGllc1wiKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZSgwKTtcblxuICAgIHJldHVybiBCYWRnZS5CYWRnZS5sb2FkQWxsKClcbiAgICAgICAgLnRoZW4oKCkgPT57XG4gICAgICAgICAgICByZXR1cm4gQmFkZ2UuQmFkZ2UudXBkYXRlQWxsKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChiYWRnZXMpID0+IHtcbiAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKGJhZGdlcykuZm9yRWFjaCgoYmFkZ2U6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChiYWRnZS5zdGF0ZSgpID09PSBCYWRnZS5TVEFURV9UT0tFTikge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHk6IGJhZGdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYmFkZ2UuY29uZmlnLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZTogYmFkZ2UuY29uZmlnLmRhdGV0aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGJhZGdlLmNvbmZpZy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCArIDFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgTG9nLmNhdGNoKGVycik7XG4gICAgICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydHlUYXBwZWQoYXJncykge1xuICAgIGNvbnN0IGluZGV4ID0gYXJncy5pbmRleDtcbiAgICBjb25zdCBwYXJ0eSA9IHBhZ2UuYmluZGluZ0NvbnRleHQuaXRlbXMuZ2V0SXRlbShpbmRleCkucGFydHk7XG5cbiAgICBjb25zdCBXQUxMRVRfREVMRVRFID0gXCJEZWxldGVcIjtcbiAgICBjb25zdCBXQUxMRVRfU0hPVyA9IFwiU2hvd1wiO1xuXG4gICAgY29uc3QgYWN0aW9ucyA9IFtXQUxMRVRfU0hPVywgV0FMTEVUX0RFTEVURV07XG5cbiAgICByZXR1cm4gRGlhbG9nLmFjdGlvbih7XG4gICAgICAgIG1lc3NhZ2U6IFwiQ2hvb3NlIGFuIEFjdGlvblwiLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIkNhbmNlbFwiLFxuICAgICAgICBhY3Rpb25zXG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHN3aXRjaCAocmVzdWx0KSB7XG4gICAgICAgICAgICBjYXNlIFdBTExFVF9ERUxFVEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERpYWxvZy5jb25maXJtKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiRGVsZXRpbmcgcGFydHktdG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJZb3UncmUgYWJvdXQgdG8gZGVsZXRlIHRoZSBwYXJ0eS10b2tlbiAtIFxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJlIHlvdSBzdXJlP1wiLFxuICAgICAgICAgICAgICAgICAgICBva0J1dHRvblRleHQ6IFwiWWVzLCBkZWxldGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywga2VlcFwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0eS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0Lml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlT2JqZWN0LmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIikucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3Igd2hpbGUgZGVsZXRpbmc6XCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBXQUxMRVRfU0hPVzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9wbW9zdCgpLm5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogXCJwYWdlcy9hZG1pbi9wYXJ0aWVzL2NvbmZpZy9jb25maWctcGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxsZXQ6IHBhcnR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=