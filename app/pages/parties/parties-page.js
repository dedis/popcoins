"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dialog = require("tns-core-modules/ui/dialogs");
const Badge = require("~/lib/pop/Badge");
const Log_1 = require("~/lib/Log");
const Scan = require("../../lib/Scan");
const Convert = require("~/lib/Convert");
const RequestPath = require("~/lib/network/RequestPath");
const observable_1 = require("tns-core-modules/data/observable");
let page;
function onNavigatingTo(args) {
    page = args.object;
    page.bindingContext = observable_1.fromObject({
        party: undefined,
        qrcode: undefined
    });
    return loadParties();
}
exports.onNavigatingTo = onNavigatingTo;
function loadParties() {
    return Badge.Badge.loadAll()
        .then(upcoming => {
        Object.values(upcoming).forEach(party => {
            if (party.state() == Badge.STATE_PUBLISH) {
                page.bindingContext.party = party;
                page.bindingContext.qrcode = party.qrcodePublic();
            }
        });
    })
        .catch(err => {
        Log_1.default.catch(err);
    });
}
function addParty() {
    return Scan.scan()
        .then(string => {
        const infos = Convert.jsonToObject(string);
        return Badge.MigrateFrom.conodeGetWallet(infos.address, infos.omniledgerId, infos.id);
    })
        .catch(error => {
        return Dialog.prompt({
            // This is for the iOS simulator that doesn't have a
            // camera - in the simulator it's easy to copy/paste the
            // party-id, whereas on a real phone you wouldn't want
            // to do that.
            title: "Party-ID",
            message: "Couldn't scan party-id. Please enter party-id manually.",
            okButtonText: "Join Party",
            cancelButtonText: "Quit",
            defaultText: "",
            inputType: Dialog.inputType.text
        }).then(r => {
            if (r) {
                return Badge.MigrateFrom.conodeGetWallet("tls://gasser.blue:7002", RequestPath.OMNILEDGER_INSTANCE_ID, r.text);
            }
            else {
                throw new Error("Aborted party-id");
            }
        });
    })
        .then(newParty => {
        newParty.attendeesAdd([newParty.keypair.public]);
        return newParty.save()
            .then(() => {
            page.bindingContext.party = newParty;
            page.bindingContext.qrcode = newParty.qrcodePublic();
        })
            .catch(error => {
            Dialog.alert({
                title: "Saving error",
                message: "Couldn't save the party: " + error,
                okButtonText: "OK"
            });
        });
    })
        .catch(err => {
        Log_1.default.catch(err, "error:");
        return Dialog.alert({
            title: "Remote parties error",
            message: err,
            okButtonText: "Continue"
        }).then(() => {
            throw new Error(err);
        });
    });
}
exports.addParty = addParty;
function onReload() {
}
exports.onReload = onReload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGllcy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFydGllcy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0RBQXNEO0FBSXRELHlDQUF5QztBQUN6QyxtQ0FBNEI7QUFDNUIsdUNBQXVDO0FBQ3ZDLHlDQUF5QztBQUN6Qyx5REFBeUQ7QUFDekQsaUVBQTREO0FBRTVELElBQUksSUFBSSxDQUFDO0FBRVQsd0JBQStCLElBQW1CO0lBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsdUJBQVUsQ0FBQztRQUM3QixLQUFLLEVBQUUsU0FBUztRQUNoQixNQUFNLEVBQUUsU0FBUztLQUNwQixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDekIsQ0FBQztBQVBELHdDQU9DO0FBRUQ7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7U0FJdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0RCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDVCxhQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVEO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7U0FDYixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDWCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUNsRCxLQUFLLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNqQixvREFBb0Q7WUFDcEQsd0RBQXdEO1lBQ3hELHNEQUFzRDtZQUN0RCxjQUFjO1lBQ2QsS0FBSyxFQUFFLFVBQVU7WUFDakIsT0FBTyxFQUFFLHlEQUF5RDtZQUNsRSxZQUFZLEVBQUUsWUFBWTtZQUMxQixnQkFBZ0IsRUFBRSxNQUFNO1lBQ3hCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSTtTQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ1IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuSCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNiLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7YUFDakIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUNyQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekQsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDVCxLQUFLLEVBQUUsY0FBYztnQkFDckIsT0FBTyxFQUFFLDJCQUEyQixHQUFHLEtBQUs7Z0JBQzVDLFlBQVksRUFBRSxJQUFJO2FBQ3JCLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1QsYUFBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDaEIsS0FBSyxFQUFFLHNCQUFzQjtZQUM3QixPQUFPLEVBQUUsR0FBRztZQUNaLFlBQVksRUFBRSxVQUFVO1NBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFBO0FBQ1YsQ0FBQztBQXJERCw0QkFxREM7QUFFRDtBQUNBLENBQUM7QUFERCw0QkFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmF2aWdhdGVkRGF0YSwgUGFnZX0gZnJvbSBcInVpL3BhZ2VcIjtcbmltcG9ydCAqIGFzIERpYWxvZyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5cbmltcG9ydCAqIGFzIHZpZXcgZnJvbSBcIi4vcGFydGllcy12aWV3LW1vZGVsXCI7XG5cbmltcG9ydCAqIGFzIEJhZGdlIGZyb20gXCJ+L2xpYi9wb3AvQmFkZ2VcIjtcbmltcG9ydCBMb2cgZnJvbSBcIn4vbGliL0xvZ1wiO1xuaW1wb3J0ICogYXMgU2NhbiBmcm9tIFwiLi4vLi4vbGliL1NjYW5cIjtcbmltcG9ydCAqIGFzIENvbnZlcnQgZnJvbSBcIn4vbGliL0NvbnZlcnRcIjtcbmltcG9ydCAqIGFzIFJlcXVlc3RQYXRoIGZyb20gXCJ+L2xpYi9uZXR3b3JrL1JlcXVlc3RQYXRoXCI7XG5pbXBvcnQge2Zyb21PYmplY3R9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuXG5sZXQgcGFnZTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IGZyb21PYmplY3Qoe1xuICAgICAgICBwYXJ0eTogdW5kZWZpbmVkLFxuICAgICAgICBxcmNvZGU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIHJldHVybiBsb2FkUGFydGllcygpO1xufVxuXG5mdW5jdGlvbiBsb2FkUGFydGllcygpIHtcbiAgICByZXR1cm4gQmFkZ2UuQmFkZ2UubG9hZEFsbCgpXG4gICAgLy8gLnRoZW4od2FsbGV0cyA9PiB7XG4gICAgLy8gICAgIHJldHVybiBCYWRnZS5mZXRjaFVwY29taW5nKHdhbGxldHMpXG4gICAgLy8gfSlcbiAgICAgICAgLnRoZW4odXBjb21pbmcgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyh1cGNvbWluZykuZm9yRWFjaChwYXJ0eSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnR5LnN0YXRlKCkgPT0gQmFkZ2UuU1RBVEVfUFVCTElTSCkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0LnBhcnR5ID0gcGFydHk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQucXJjb2RlID0gcGFydHkucXJjb2RlUHVibGljKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgTG9nLmNhdGNoKGVycik7XG4gICAgICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFydHkoKSB7XG4gICAgcmV0dXJuIFNjYW4uc2NhbigpXG4gICAgICAgIC50aGVuKHN0cmluZyA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmZvcyA9IENvbnZlcnQuanNvblRvT2JqZWN0KHN0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gQmFkZ2UuTWlncmF0ZUZyb20uY29ub2RlR2V0V2FsbGV0KGluZm9zLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgaW5mb3Mub21uaWxlZGdlcklkLCBpbmZvcy5pZCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gRGlhbG9nLnByb21wdCh7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmb3IgdGhlIGlPUyBzaW11bGF0b3IgdGhhdCBkb2Vzbid0IGhhdmUgYVxuICAgICAgICAgICAgICAgIC8vIGNhbWVyYSAtIGluIHRoZSBzaW11bGF0b3IgaXQncyBlYXN5IHRvIGNvcHkvcGFzdGUgdGhlXG4gICAgICAgICAgICAgICAgLy8gcGFydHktaWQsIHdoZXJlYXMgb24gYSByZWFsIHBob25lIHlvdSB3b3VsZG4ndCB3YW50XG4gICAgICAgICAgICAgICAgLy8gdG8gZG8gdGhhdC5cbiAgICAgICAgICAgICAgICB0aXRsZTogXCJQYXJ0eS1JRFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQ291bGRuJ3Qgc2NhbiBwYXJ0eS1pZC4gUGxlYXNlIGVudGVyIHBhcnR5LWlkIG1hbnVhbGx5LlwiLFxuICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJKb2luIFBhcnR5XCIsXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJRdWl0XCIsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFRleHQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgaW5wdXRUeXBlOiBEaWFsb2cuaW5wdXRUeXBlLnRleHRcbiAgICAgICAgICAgIH0pLnRoZW4ociA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJhZGdlLk1pZ3JhdGVGcm9tLmNvbm9kZUdldFdhbGxldChcInRsczovL2dhc3Nlci5ibHVlOjcwMDJcIiwgUmVxdWVzdFBhdGguT01OSUxFREdFUl9JTlNUQU5DRV9JRCwgci50ZXh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYm9ydGVkIHBhcnR5LWlkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4obmV3UGFydHkgPT4ge1xuICAgICAgICAgICAgbmV3UGFydHkuYXR0ZW5kZWVzQWRkKFtuZXdQYXJ0eS5rZXlwYWlyLnB1YmxpY10pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1BhcnR5LnNhdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZS5iaW5kaW5nQ29udGV4dC5wYXJ0eSA9IG5ld1BhcnR5O1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmJpbmRpbmdDb250ZXh0LnFyY29kZSA9IG5ld1BhcnR5LnFyY29kZVB1YmxpYygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgRGlhbG9nLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlNhdmluZyBlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDb3VsZG4ndCBzYXZlIHRoZSBwYXJ0eTogXCIgKyBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uVGV4dDogXCJPS1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIExvZy5jYXRjaChlcnIsIFwiZXJyb3I6XCIpO1xuICAgICAgICAgICAgcmV0dXJuIERpYWxvZy5hbGVydCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiUmVtb3RlIHBhcnRpZXMgZXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIsXG4gICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIkNvbnRpbnVlXCJcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uUmVsb2FkKCkge1xufSJdfQ==