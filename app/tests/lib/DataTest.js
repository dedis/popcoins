"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Data_1 = require("~/lib/Data");
const Badge_1 = require("~/lib/pop/Badge");
const Configuration_1 = require("~/lib/pop/Configuration");
const Log_1 = require("~/lib/Log");
const Common_1 = require("~/tests/lib/Common");
const KeyPair = require("~/lib/crypto/KeyPair");
describe("Loading new data", function () {
    it("New data must have version 0 and be able to save new version", function () {
        let dl;
        return Data_1.Data.load()
            .then(d => {
            dl = d;
            expect(d.version).toEqual(0);
            d.version = 1;
            return d.save();
        })
            .then(() => {
            return Data_1.Data.load();
        })
            .then(d2 => {
            expect(d2.version).toEqual(1);
        });
    });
});
fdescribe("Loading Badges", () => {
    it("Should be able to load existing badges", () => {
        let c = new Configuration_1.default("test", new Date(), "jasmine", Common_1.testRoster);
        let b = new Badge_1.Badge(c);
        let kp = new KeyPair();
        b.attendees = [kp.public];
        let d;
        return b.save()
            .then(() => {
            return Data_1.Data.load();
        })
            .then(d1 => {
            d = d1;
            return d.loadBadges();
        })
            .then((badges) => {
            expect(badges.length).toBe(0);
            expect(d.badges.length).toBe(0);
            expect(d.parties.length).toBe(1);
        })
            .catch(err => {
            Log_1.Log.rcatch(err);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YVRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRhVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFrQztBQUNsQywyQ0FBd0M7QUFDeEMsMkRBQW9EO0FBR3BELG1DQUFnQztBQUNoQywrQ0FBZ0Q7QUFDaEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFFaEQsUUFBUSxDQUFDLGtCQUFrQixFQUFFO0lBQ3pCLEVBQUUsQ0FBQyw4REFBOEQsRUFBRTtRQUMvRCxJQUFJLEVBQVEsQ0FBQztRQUNiLE1BQU0sQ0FBQyxXQUFJLENBQUMsSUFBSSxFQUFFO2FBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ04sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNQLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsTUFBTSxDQUFDLFdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDUCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzdCLEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsSUFBSSxDQUFDLEdBQUcsSUFBSSx1QkFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxtQkFBVSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLEdBQUcsSUFBSSxhQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBTyxDQUFDO1FBQ1osTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7YUFDVixJQUFJLENBQUMsR0FBRSxFQUFFO1lBQ04sTUFBTSxDQUFDLFdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDUCxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1AsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1QsU0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhIH0gZnJvbSBcIn4vbGliL0RhdGFcIjtcbmltcG9ydCB7IEJhZGdlIH0gZnJvbSBcIn4vbGliL3BvcC9CYWRnZVwiO1xuaW1wb3J0IENvbmZpZ3VyYXRpb24gZnJvbSBcIn4vbGliL3BvcC9Db25maWd1cmF0aW9uXCI7XG5pbXBvcnQgKiBhcyBOZXQgZnJvbSBcIn4vbGliL25ldHdvcmsvTlNOZXRcIjtcbmltcG9ydCAqIGFzIFJlcXVlc3RQYXRoIGZyb20gXCJ+L2xpYi9uZXR3b3JrL1JlcXVlc3RQYXRoXCI7XG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwifi9saWIvTG9nXCI7XG5pbXBvcnQgeyB0ZXN0Um9zdGVyIH0gZnJvbSBcIn4vdGVzdHMvbGliL0NvbW1vblwiO1xuY29uc3QgS2V5UGFpciA9IHJlcXVpcmUoXCJ+L2xpYi9jcnlwdG8vS2V5UGFpclwiKTtcblxuZGVzY3JpYmUoXCJMb2FkaW5nIG5ldyBkYXRhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcIk5ldyBkYXRhIG11c3QgaGF2ZSB2ZXJzaW9uIDAgYW5kIGJlIGFibGUgdG8gc2F2ZSBuZXcgdmVyc2lvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBkbDogRGF0YTtcbiAgICAgICAgcmV0dXJuIERhdGEubG9hZCgpXG4gICAgICAgICAgICAudGhlbihkID0+IHtcbiAgICAgICAgICAgICAgICBkbCA9IGQ7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGQudmVyc2lvbikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgICAgICBkLnZlcnNpb24gPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnNhdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGEubG9hZCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGQyID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoZDIudmVyc2lvbikudG9FcXVhbCgxKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG5cbmZkZXNjcmliZShcIkxvYWRpbmcgQmFkZ2VzXCIsICgpID0+IHtcbiAgICBpdChcIlNob3VsZCBiZSBhYmxlIHRvIGxvYWQgZXhpc3RpbmcgYmFkZ2VzXCIsICgpID0+IHtcbiAgICAgICAgbGV0IGMgPSBuZXcgQ29uZmlndXJhdGlvbihcInRlc3RcIiwgbmV3IERhdGUoKSwgXCJqYXNtaW5lXCIsIHRlc3RSb3N0ZXIpO1xuICAgICAgICBsZXQgYiA9IG5ldyBCYWRnZShjKTtcbiAgICAgICAgbGV0IGtwID0gbmV3IEtleVBhaXIoKTtcbiAgICAgICAgYi5hdHRlbmRlZXMgPSBba3AucHVibGljXTtcbiAgICAgICAgbGV0IGQ6IERhdGE7XG4gICAgICAgIHJldHVybiBiLnNhdmUoKVxuICAgICAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0YS5sb2FkKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZDEgPT57XG4gICAgICAgICAgICAgICAgZCA9IGQxO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmxvYWRCYWRnZXMoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoYmFkZ2VzKSA9PntcbiAgICAgICAgICAgICAgICBleHBlY3QoYmFkZ2VzLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoZC5iYWRnZXMubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICAgICAgICAgIGV4cGVjdChkLnBhcnRpZXMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT57XG4gICAgICAgICAgICAgICAgTG9nLnJjYXRjaChlcnIpO1xuICAgICAgICAgICAgfSlcbiAgICB9KTtcbn0pOyJdfQ==